// Code generated by protoc-gen-go-xhttp. DO NOT EDIT.
// versions:
// protoc-gen-go-xhttp v1.0.0

package v1

import (
	context "context"
	"github.com/go-kratos/kratos/v2/transport/xhttp"
	binding "github.com/go-kratos/kratos/v2/transport/xhttp/binding"
	"github.com/gofiber/fiber/v2"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.BindBody

type GreeterXHTTPServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterXHTTPServer(s *xhttp.Server, srv GreeterXHTTPServer) {
	s.Route(func(r fiber.Router) {
		api := r.Group("api/helloworld/v1/greeter")
		api.Get("/helloworld/:name", _Greeter_SayHello0_XHTTP_Handler(srv))
	})
}

func _Greeter_SayHello0_XHTTP_Handler(srv GreeterXHTTPServer) fiber.Handler {
	return func(ctx *fiber.Ctx) error {
		var in HelloRequest
		if err := binding.BindQuery(ctx, &in); err != nil {
			return err
		}
		if err := binding.BindParams(ctx, &in); err != nil {
			return err
		}

		reply, err := srv.SayHello(ctx.Context(), &in)
		if err != nil {
			return err
		}
		return ctx.JSON(fiber.Map{"data": reply})
	}
}
